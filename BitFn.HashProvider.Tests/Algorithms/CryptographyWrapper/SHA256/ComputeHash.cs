using System;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Run00.MsTest;
using Crypto = System.Security.Cryptography;

namespace BitFn.HashProvider.Tests.Algorithms.CryptographyWrapper.SHA256
{
	[TestClass]
	[CategorizeByConventionClass(typeof(ComputeHash))]
	public class ComputeHash
	{
		[TestMethod]
		[CategorizeByConvention]
		public void WhenCertainValuesGiven_ShouldReachIntMaxValue()
		{
			// Arrange
			const int expected = int.MaxValue;

			var values = new byte[]
			{
				0xB0, 0x42, 0x26, 0xA2, 0x81, 0xB1, 0xEB, 0xD3, 0x31, 0x24, 0x3D, 0xCE, 0x9E, 0xDE, 0x68, 0x36, 0xE5, 0x00, 0xEB,
				0xBF, 0xED, 0x4A, 0xEC, 0xC1, 0x6E, 0x6D, 0x4A, 0xA8, 0x8F, 0x4A, 0x1A, 0x2A, 0xF8, 0x5D, 0x78, 0x0E, 0x84, 0xCE,
				0x78, 0xD2, 0x72, 0xDC, 0x7E, 0x2A, 0x0A, 0x3C, 0xBD, 0x9D, 0xEF, 0x6E, 0xAA, 0x06, 0xA5, 0x9F, 0x2F, 0x66, 0x55,
				0x65, 0x33, 0x13, 0x66, 0x43, 0x43
			};
			var algorithm = new HashProvider.Algorithms.CryptographyWrapper(Crypto.SHA256.Create());

			// Act
			var actual = algorithm.ComputeHash(values);

			// Assert
			var ints = new int[256 / 8 / sizeof(int)];
			Buffer.BlockCopy(actual, 0, ints, 0, actual.Length);
			CollectionAssert.Contains(ints, expected);
		}

		[TestMethod]
		[CategorizeByConvention]
		public void WhenCertainValuesGiven_ShouldReachIntMinValue()
		{
			// Arrange
			const int expected = int.MinValue;

			var values = new byte[]
			{
				0xAF, 0x0C, 0xCC, 0x04, 0xB0, 0x54, 0xEA, 0x7C, 0x7C, 0x2D, 0x27, 0x47, 0xED, 0xC5, 0x3D, 0x7A, 0x90, 0xB6, 0x0F,
				0xA2, 0x62, 0x2B, 0x46, 0x1B, 0x4A, 0x8A, 0x31, 0x0E, 0xCE, 0x82, 0x8F, 0x5E, 0x3B, 0x68, 0x26, 0x87, 0xD1, 0xA6,
				0xE6, 0xAC, 0x53, 0xFD, 0x6F, 0x0F, 0xEB, 0x3E, 0x65, 0x3E, 0x1B, 0x0A, 0x03, 0xDF, 0x40, 0xB9, 0x73, 0x84, 0xC5,
				0xB0, 0xB9, 0x26, 0x23, 0xDB, 0xAD
			};
			var algorithm = new HashProvider.Algorithms.CryptographyWrapper(Crypto.SHA256.Create());

			// Act
			var actual = algorithm.ComputeHash(values);

			// Assert
			var ints = new int[256 / 8 / sizeof(int)];
			Buffer.BlockCopy(actual, 0, ints, 0, actual.Length);
			CollectionAssert.Contains(ints, expected);
		}
	}
}