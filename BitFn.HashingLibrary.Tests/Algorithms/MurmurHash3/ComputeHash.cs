using System;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Ploeh.AutoFixture;
using Run00.MsTest;

namespace BitFn.HashingLibrary.Tests.Algorithms.MurmurHash3
{
	[TestClass]
	[CategorizeByConventionClass(typeof(ComputeHash))]
	public class ComputeHash
	{
		[TestMethod]
		[CategorizeByConvention]
		public void WhenCastAsIAlgorithmInt_ShouldMatchByteResult()
		{
			// Arrange
			var fixture = new Fixture();
			var values = fixture.Create<byte[]>();
			var algorithm = new HashingLibrary.Algorithms.MurmurHash3();

			var expected = algorithm.ComputeHash(values);
			var expectedBytes = BitConverter.GetBytes(expected);

			// Act
			var actual = ((IAlgorithm)algorithm).ComputeHash(values);

			// Assert
			CollectionAssert.AreEqual(expectedBytes, actual);
		}

		[TestMethod]
		[CategorizeByConvention]
		public void WhenCertainValuesGiven_ShouldReachIntMaxValue()
		{
			// Arrange
			const int expected = int.MaxValue;

			var values = new byte[]
			{
				0x53, 0x9C, 0x34, 0x4C, 0xFB, 0x64, 0xE2, 0x1A, 0x5B, 0xEB, 0xB2, 0x03, 0x6E, 0x6D, 0xEA, 0x86, 0xE0, 0x5A, 0xFD,
				0x2F, 0x68, 0xFE, 0x4D, 0x6F, 0xCD, 0xE1, 0x33, 0x2B, 0x1F, 0x7A, 0x72, 0xD5, 0xE7, 0xB3, 0x4D, 0xA3, 0xC7, 0xDD,
				0xCD, 0x18, 0xB8, 0xFF, 0x1F, 0xB1, 0x8F, 0xF3, 0xFC, 0xF0, 0xFC, 0x57, 0xE7, 0xC7, 0x46, 0xE9, 0xDD, 0x54, 0x4E,
				0xC5, 0x7F, 0x19, 0x30, 0xB6, 0xFA, 0xE1, 0x79, 0xDD, 0x1B
			};
			var algorithm = new HashingLibrary.Algorithms.MurmurHash3();

			// Act
			var actual = algorithm.ComputeHash(values);

			// Assert
			Assert.AreEqual(expected, actual);
		}

		[TestMethod]
		[CategorizeByConvention]
		public void WhenCertainValuesGiven_ShouldReachIntMinValue()
		{
			// Arrange
			const int expected = int.MinValue;

			var values = new byte[]
			{
				0x83, 0x49, 0xFB, 0x32, 0xB7, 0x44, 0xAA, 0x2B, 0x90, 0xD1, 0x4D, 0x10, 0xEB, 0xFF, 0x7F, 0xA7, 0x50, 0x0F, 0xAB,
				0xA0, 0x5C, 0x25, 0x4D, 0x2C, 0x30, 0xDA, 0x8D, 0x2C, 0xA2, 0x37, 0x07, 0x03, 0x44, 0xB4, 0xE7, 0xD3, 0x45, 0x83,
				0xCE, 0x56, 0x73, 0x7C, 0x89, 0x28, 0xF4, 0x0A, 0x65, 0x91, 0x2F, 0xA5, 0xFD, 0x51, 0x65, 0xA0, 0xF4, 0x5D, 0xFB,
				0xCE, 0x01, 0xDC, 0xB6, 0x7E, 0x88, 0x58, 0xCA, 0x49, 0xCB
			};
			var algorithm = new HashingLibrary.Algorithms.MurmurHash3();

			// Act
			var actual = algorithm.ComputeHash(values);

			// Assert
			Assert.AreEqual(expected, actual);
		}

		[TestMethod]
		[CategorizeByConvention]
		public void WhenGivenZeroBytes_ShouldReturn()
		{
			// Arrange
			var values = new byte[] {};
			var algorithm = new HashingLibrary.Algorithms.MurmurHash3();

			// Act
			var actual = algorithm.ComputeHash(values);

			// Assert
		}
	}
}
