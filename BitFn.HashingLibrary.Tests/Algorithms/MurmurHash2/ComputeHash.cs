using System;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Ploeh.AutoFixture;
using Run00.MsTest;

namespace BitFn.HashingLibrary.Tests.Algorithms.MurmurHash2
{
	[TestClass]
	[CategorizeByConventionClass(typeof(ComputeHash))]
	public class ComputeHash
	{
		[TestMethod]
		[CategorizeByConvention]
		public void WhenCastAsIAlgorithmInt_ShouldMatchByteResult()
		{
			// Arrange
			var fixture = new Fixture();
			var values = fixture.Create<byte[]>();
			var algorithm = new HashingLibrary.Algorithms.MurmurHash2();

			var expected = algorithm.ComputeHash(values);
			var expectedBytes = BitConverter.GetBytes(expected);

			// Act
			var actual = ((IAlgorithm)algorithm).ComputeHash(values);

			// Assert
			CollectionAssert.AreEqual(expectedBytes, actual);
		}

		[TestMethod]
		[CategorizeByConvention]
		public void WhenCertainValuesGiven_ShouldReachIntMaxValue()
		{
			// Arrange
			const int expected = int.MaxValue;

			var values = new byte[]
			{
				0xE9, 0xE0, 0xBB, 0xEE, 0x9F, 0xCA, 0xFF, 0x98, 0x26, 0x2F, 0x66, 0x80, 0x69, 0xB5, 0xF0, 0xCF, 0xDA, 0x83, 0x15,
				0x10, 0x4E, 0x9F, 0xDE, 0x12, 0xF5, 0x2E, 0x3E, 0x99, 0xB5, 0x1C, 0xEB, 0x5E, 0xC4, 0x28, 0x0F, 0xB5, 0xC2, 0x56,
				0xCF, 0x3B, 0xCC, 0xDE, 0xE3, 0xE6, 0x91, 0xF2, 0xB6, 0x83, 0x92, 0xEA, 0xD0, 0x18, 0x19, 0xEA, 0xE4, 0x4A, 0x02,
				0xA9, 0xF8, 0x71, 0x8B, 0x65, 0xE3, 0x0A, 0x43, 0x07, 0xBC
			};
			var algorithm = new HashingLibrary.Algorithms.MurmurHash2();

			// Act
			var actual = algorithm.ComputeHash(values);

			// Assert
			Assert.AreEqual(expected, actual);
		}

		[TestMethod]
		[CategorizeByConvention]
		public void WhenCertainValuesGiven_ShouldReachIntMinValue()
		{
			// Arrange
			const int expected = int.MinValue;

			var values = new byte[]
			{
				0x77, 0x97, 0xBE, 0x16, 0xDD, 0xDD, 0xFF, 0x32, 0x1C, 0x38, 0xA7, 0x4A, 0x29, 0xA3, 0x52, 0x31, 0xC6, 0x4F, 0x81,
				0x66, 0x11, 0x37, 0x81, 0xB5, 0x7B, 0x13, 0xCF, 0x51, 0x41, 0x13, 0xEC, 0x3C, 0xD0, 0x41, 0x78, 0x36, 0x56, 0xCD,
				0x5D, 0x9B, 0x42, 0x9E, 0x24, 0x5B, 0x9C, 0x1B, 0x3A, 0xC2, 0xAA, 0x78, 0x87, 0x36, 0x9F, 0x1B, 0xAE, 0x40, 0x15,
				0x08, 0x9A, 0xCA, 0x0E, 0xAD, 0xF1, 0x08, 0x4C, 0x6A, 0x7A
			};
			var algorithm = new HashingLibrary.Algorithms.MurmurHash2();

			// Act
			var actual = algorithm.ComputeHash(values);

			// Assert
			Assert.AreEqual(expected, actual);
		}

		[TestMethod]
		[CategorizeByConvention]
		public void WhenGivenZeroBytes_ShouldReturn()
		{
			// Arrange
			var values = new byte[] {};
			var algorithm = new HashingLibrary.Algorithms.MurmurHash2();

			// Act
			var actual = algorithm.ComputeHash(values);

			// Assert
		}
	}
}
